name: WLED CI

on: [push, pull_request]

jobs:

  get_default_envs:
    name: Gather Environments
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    - name: Install PlatformIO
      run: pip install -r requirements.txt
    - name: Get default environments
      id: envs
      run: |
        echo "environments=$(pio project config --json-output | jq -cr '.[0][1][0][1]')" >> $GITHUB_OUTPUT
    outputs:
      environments: ${{ steps.envs.outputs.environments }}


  build:
    name: Build Enviornments
    runs-on: ubuntu-latest
    needs: get_default_envs
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJSON(needs.get_default_envs.outputs.environments) }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        cache: 'npm'
    - run: npm ci
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
              ~/.platformio/.cache
              ~/.buildcache
              build_output

        key: pio-${{ runner.os }}-${{ matrix.environment }}-${{ hashFiles('platformio.ini', 'pio-scripts/output_bins.py') }}-${{ hashFiles('wled00/**', 'usermods/**') }}
        restore-keys: pio-${{ runner.os }}-${{ matrix.environment }}-${{ hashFiles('platformio.ini', 'pio-scripts/output_bins.py') }}-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
          python-version: '3.12'
          cache: 'pip'
    - name: Install PlatformIO
      run: pip install -r requirements.txt
    - name: Build firmware
      run:  pio run -e ${{ matrix.environment }}
#-----------------------------------------aldiy add date and relase name------------------------------------------------
    - name: 'ALDIY- Set the date and relese  as variable'
      run:  |
        echo "NOW=$(date +'%y_%m_%d_T%H%M')" >> $GITHUB_ENV
        cd   build_output/release/
        echo "RELXX=$(echo *.bin)" >> $GITHUB_ENV
        
    - name: 'ALDIY- UPLOAD ARTIFACRS'
      uses: actions/upload-artifact@v4
      with:
        name: ALDIY_ $GITHUB_REPOSITORY_OWNER $GITHUB_REF_NAME ${{ env.NOW }}_${{ env.RELXX }}
#--------------------------------------------------------------------------------------------------------------
        path: |
          build_output/release/*.bin
          build_output/release/*_ESP02*.bin.gz

#---------------------------------------test zone -----------------------------------------------------------------------
    - name: 'ALDIY- Prints vars'
      run:  |
        echo "github.repository"
        echo ${{ github.repository }}
        
        echo GITHUB_REPOSITORY
        echo $GITHUB_REPOSITORY
        
        echo GITHUB_REF_NAME
        echo $GITHUB_REF_NAME
        
        # branch name 
        echo  github.ref.name
        echo ${{ github.ref.name}}
        
        echo GITHUB_REPOSITORY_OWNER
        echo $GITHUB_REPOSITORY_OWNER

        echo "GITHUB_REPOSITORY_OWNER 2"
        echo $GITHUB_REPOSITORY_OWNER
        
        echo "github.repository.owner"
        echo ${{ github.repository.owner }}
        
        echo GITHUB_REPOSITORY_ID
        echo $GITHUB_REPOSITORY_ID
        
        echo GITHUB_HEAD_REF
        echo $GITHUB_HEAD_REF
        
        echo "github.head.ref"
        echo ${{ github.head.ref }}
        
        echo GITHUB_BASE_REF
        echo $GITHUB_BASE_REF
        
        echo "github.base.ref"
        echo ${{ github.base.ref }}
        
        echo GITHUB_ACTOR
        echo $GITHUB_ACTOR
        
        echo GITHUB_ACTION_REPOSITORY
        echo $GITHUB_ACTION_REPOSITORY
        
        echo "### Take the bins and shutup! :rocket:" >> $GITHUB_STEP_SUMMARY
        echo "### Take the bins pussy! :cat:" >> $GITHUB_STEP_SUMMARY
        
#--------------------------------------------------------------------------------------------------------------
    - name: Dump github context
      run:   echo "$GITHUB_CONTEXT"
      shell: bash
      env:
       GITHUB_CONTEXT: ${{ toJson(github) }
#--------------------------------------------------------------------------------------------------------------






    
        
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Create draft release
      uses: softprops/action-gh-release@v1
      with:
        draft: True
        files: |
          *.bin
          *.bin.gz


  testCdata:
    name: Test cdata.js
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - run: npm ci
      - run: npm test
